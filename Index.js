//By: ñßÑ ùêãùêîùêÇùêÄùêí ùêåùêéùêÉ ùêÉùêéùêåùêàùêçùêÄ ñßÑ
//Canal: https://whatsapp.com/channel/0029Va6riekH5JLwLUFI7P2B

import express from 'express'
import { fileURLToPath } from 'url'
import path from 'path'
import chalk from 'chalk'
import morgan from 'morgan'

const __dirname = path.dirname(fileURLToPath(import.meta.url))
const app = express()
const PORT = process.env.PORT || 4000
const criador = "@lucas_mod_domina"

const logger = {
success: (...args) => console.log(chalk.green(chalk.bold('[SUCCESS]'), ...args)),
error: (...args) => console.log(chalk.red(chalk.bold('[ERROR]'), ...args)),
debug: (...args) => console.log(chalk.blue(chalk.bold('[DEBUG]'), ...args)),
request: (...args) => console.log(chalk.yellow(chalk.bold('[REQUEST]'), ...args)),
system: (...args) => console.log(chalk.magenta(chalk.bold('[SYSTEM]'), ...args))
}

app.use(express.static(path.join(__dirname, 'public'), {
setHeaders: (res) => {
res.setHeader('X-Powered-By', 'Lucas Fonts Generator')
res.setHeader('Strict-Transport-Security', 'max-age=31536000; includeSubDomains')
}
}))
app.use(express.json())
app.use(express.urlencoded({ extended: true }))
app.use(morgan((tokens, req, res) => {
const status = tokens.status(req, res)
const method = tokens.method(req, res)
const url = tokens.url(req, res)
const responseTime = tokens['response-time'](req, res)
const logParts = [
chalk.hex('#34ace0').bold(method),
chalk.hex('#ffb142')(url),
chalk.hex('#ff5252').bold(status),
chalk.hex('#2ed573')(`${responseTime}ms`),
chalk.hex('#1e90ff')(req.headers['user-agent'])
]
logger.request(...logParts)
return null
}))

// ========== SISTEMA DE FONTES ==========
const fontStyles = {
// Estilos b√°sicos
boldSerif: t => convertRange(t, 0x1D400),
boldSans: t => convertRange(t, 0x1D5D4),
italic: t => convertRange(t, 0x1D434),
boldItalic: t => convertRange(t, 0x1D468),
script: t => convertRange(t, 0x1D49C),
boldScript: t => convertRange(t, 0x1D4D0),
fraktur: t => convertRange(t, 0x1D504),
boldFraktur: t => convertRange(t, 0x1D56C),
monospace: t => convertRange(t, 0x1D670),
doubleStruck: t => convertRange(t, 0x1D538),
sansSerif: t => convertRange(t, 0x1D5A0),
sansBold: t => convertRange(t, 0x1D5D4),
sansItalic: t => convertRange(t, 0x1D608),
sansBoldItalic: t => convertRange(t, 0x1D63C),
// Estilos especiais
circled: t => convertRange(t, 0x24B6, 0x24D0),
squared: t => convertRange(t, 0x1F130, 0x1F150),
negativeSquared: t => convertRange(t, 0x1F170, 0x1F190),
parenthesized: t => Array.from(t).map(c => `(${c})`).join(''),
fullwidth: t => convertRange(t, 0xFF21, 0xFF41),
smallCaps: t => t.toLowerCase().split('').map(c => 
String.fromCodePoint(c.charCodeAt(0) + (c >= 'a' && c <= 'z' ? 0x1D68 : 0))).join(''),
// Estilos internacionais
cyrillic: t => t.replace(/[a-zA-Z]/g, m => {
const map = {
'A': '–ê', 'B': '–í', 'C': '–°', 'E': '–ï', 'H': '–ù', 
'K': '–ö', 'M': '–ú', 'O': '–û', 'P': '–†', 'T': '–¢',
'X': '–•', 'a': '–∞', 'c': '—Å', 'e': '–µ', 'o': '–æ',
'p': '—Ä', 'x': '—Ö', 'y': '—É'
}
return map[m] || m
}),
runic: t => convertRange(t, 0x16A0).replace(/[^a-zA-Z]/g, ''),
greek: t => t.replace(/[a-zA-Z]/g, m => {
const grMap = {
'A': 'Œë', 'B': 'Œí', 'C': 'Œ®', 'D': 'Œî', 'E': 'Œï',
'F': 'Œ¶', 'G': 'Œì', 'H': 'Œó', 'I': 'Œô', 'J': 'Œû',
'K': 'Œö', 'L': 'Œõ', 'M': 'Œú', 'N': 'Œù', 'O': 'Œü',
'P': 'Œ†', 'Q': 'Œò', 'R': 'Œ°', 'S': 'Œ£', 'T': 'Œ§',
'U': 'Œ•', 'V': 'Œ©', 'W': 'Œû', 'X': 'Œß', 'Y': 'Œ•',
'Z': 'Œñ', 'a': 'Œ±', 'b': 'Œ≤', 'c': 'œà', 'd': 'Œ¥',
'e': 'Œµ', 'f': 'œÜ', 'g': 'Œ≥', 'h': 'Œ∑', 'i': 'Œπ',
'j': 'Œæ', 'k': 'Œ∫', 'l': 'Œª', 'm': 'Œº', 'n': 'ŒΩ',
'o': 'Œø', 'p': 'œÄ', 'q': 'Œ∏', 'r': 'œÅ', 's': 'œÉ',
't': 'œÑ', 'u': 'œÖ', 'v': 'œâ', 'w': 'Œæ', 'x': 'œá',
'y': 'œÖ', 'z': 'Œ∂'
}
return grMap[m] || m
}),
hebrew: t => convertRange(t, 0x5D0),
arabic: t => convertRange(t, 0x621),
// Estilos decorativos
inverted: t => Array.from(t).reverse().map(c => 
String.fromCodePoint(0xFFFD - c.charCodeAt(0))).join(''),
upsideDown: t => t.split('').map(c => upsideDownMap[c] || c).reverse().join(''),
morse: t => t.toUpperCase().split('').map(c => morseCode[c] || c).join(' '),
braille: t => t.toUpperCase().split('').map(c => 
c.charCodeAt(0) > 255 ? c : String.fromCodePoint(0x2800 + c.charCodeAt(0))).join(''),
zalgo: t => zalgoGenerator(t),
// Estilos matem√°ticos
mathBold: t => convertRange(t, 0x1D400),
mathItalic: t => convertRange(t, 0x1D434),
mathBoldItalic: t => convertRange(t, 0x1D468),
mathScript: t => convertRange(t, 0x1D49C),
mathDoubleStruck: t => convertRange(t, 0x1D538),
// Estilos extras
gothic: t => convertRange(t, 0x10330),
glitch: t => t.split('').map(c => `${c}\u0301`).join(''),
wave: t => t.split('').map((c,i) => i%2 === 0 ? c.toUpperCase() : c.toLowerCase()).join(''),
bubble: t => t.split('').map(c => `(${c})`).join(''),
subscript: t => convertRange(t, 0x2080, false, -0x3A),
superscript: t => convertRange(t, 0x2070)
}

// ========== FUN√á√ïES AUXILIARES ==========
const convertRange = (text, startUpper, startLower = startUpper + 26) => {
return text.split('').map(c => {
const code = c.charCodeAt(0)
if (code >= 65 && code <= 90) { // A-Z
return String.fromCodePoint(startUpper + (code - 65))
} else if (code >= 97 && code <= 122) { // a-z
return String.fromCodePoint(startLower + (code - 97))
} else {
return c
}
}).join('')
}
const upsideDownMap = {
a: '…ê', b: 'q', c: '…î', d: 'p', e: '«ù', f: '…ü', g: '∆É',
h: '…•', i: '·¥â', j: '…æ', k: ' û', l: 'l', m: '…Ø', n: 'u',
o: 'o', p: 'd', q: 'b', r: '…π', s: 's', t: ' á', u: 'n',
v: ' å', w: ' ç', x: 'x', y: ' é', z: 'z', ' ': ' '
}
const morseCode = {
'A': '.-', 'B': '-...', 'C': '-.-.', 'D': '-..', 'E': '.', 'F': '..-.',
'G': '--.', 'H': '....', 'I': '..', 'J': '.---', 'K': '-.-', 'L': '.-..',
'M': '--', 'N': '-.', 'O': '---', 'P': '.--.', 'Q': '--.-', 'R': '.-.',
'S': '...', 'T': '-', 'U': '..-', 'V': '...-', 'W': '.--', 'X': '-..-',
'Y': '-.--', 'Z': '--..', '0': '-----', '1': '.----', '2': '..---',
'3': '...--', '4': '....-', '5': '.....', '6': '-....', '7': '--...',
'8': '---..', '9': '----.'
}
const zalgoGenerator = (text) => {
const zalgoChars = ['\u030D','\u030E','\u0304','\u0305','\u033F','\u0311','\u0306','\u0310','\u0352','\u0357','\u0351','\u0307','\u0308','\u030A','\u0342','\u0343']
return text.split('').map(c => c + zalgoChars[Math.floor(Math.random() * zalgoChars.length)]).join('')
}

// ========== ROTAS ==========
const setupRoutes = () => {
const staticRoutes = ['/', '/terms', '/privacy', '/api']
staticRoutes.forEach(route => {
app.get(route, (req, res) => {
logger.debug(`Acesso √† rota est√°tica: ${route}`)
res.sendFile(path.join(__dirname, 'public', `${route === '/' ? 'index' : route}.html`))
})
})

app.get('/nicks/generate', async (req, res) => {
try {
const { nick } = req.query
logger.request(`Solicita√ß√£o de gera√ß√£o para: ${nick}`)
if (!nick) {
logger.error('Nick n√£o fornecido')
return res.status(400).json({ status: 'error', message: 'Par√¢metro "nick" √© obrigat√≥rio', example: '/nicks/generate?nick=SeuNick' })
}
const results = Object.entries(fontStyles).map(([style, generator]) => ({ style, nick: generator(nick)}))
logger.success(`Nick gerado com sucesso: ${nick}`)
res.json({ status: 'success', criador: `${criador}`, original: nick, count: results.length, timestamp: new Date().toISOString(), results })
} catch (error) {
logger.error(`Erro na gera√ß√£o: ${error.message}`)
res.status(500).json({ status: 'error', message: 'Falha na gera√ß√£o de nicks', error: error.message })
}
})

app.get('/nicks/decorated', async (req, res) => {
try {
const { nick } = req.query
logger.request(`Solicita√ß√£o de decora√ß√£o para: ${nick}`)
if (!nick) {
logger.error('Nick n√£o fornecido')
return res.status(400).json({ status: 'error', message: 'Par√¢metro "nick" √© obrigat√≥rio', example: '/nicks/decorated?nick=SeuNick' })
}
const decorators = {
prefix: ['ñßÑ', '‚ô±', 'ìÜ£', '‚õß', 'ÍßÅ', '‚òØ', '‚ö°', '‚úß', '‚ú¶', '‚ùÇ'],
suffix: ['ÍßÇ', '‚ô∞', 'ìÉ†', '‚öõ', '‚úû', '‚ú†', '‚ùÅ', '‚ú™', '‚ú∞', '‚ãÜ'],
styles: ['boldSerif', 'fraktur', 'cyrillic', 'script', 'doubleStruck', 'runic', 'gothic']
}
const variants = Array.from({ length: 25 }, () => {
const prefix = decorators.prefix[Math.floor(Math.random() * decorators.prefix.length)]
const suffix = decorators.suffix[Math.floor(Math.random() * decorators.suffix.length)]
const style = decorators.styles[Math.floor(Math.random() * decorators.styles.length)]
return `${prefix} ${fontStyles[style](nick)} ${suffix}`
})
logger.success(`Decora√ß√£o gerada com sucesso: ${nick}`)
res.json({ status: 'success', criador: `${criador}`, original: nick, count: variants.length, timestamp: new Date().toISOString(), variants })
} catch (error) {
logger.error(`Erro na decora√ß√£o: ${error.message}`)
res.status(500).json({ status: 'error', message: 'Falha na gera√ß√£o de variantes decoradas', error: error.message })
}
})

app.get('/health', (req, res) => {
res.json({ status: 'healthy', timestamp: new Date().toISOString(), uptime: process.uptime(), memory: process.memoryUsage()})
})
}

// ========== INICIALIZA√á√ÉO DO SERVIDOR ==========
const startServer = () => {
setupRoutes()
app.listen(PORT, () => {
logger.system(chalk.green.bold(`Servidor ativo em: http://localhost:${PORT}\n\n`))
logger.system(chalk.blue.bold('Ambiente:', process.env.NODE_ENV || 'development'))
logger.system(chalk.blue.bold('Vers√£o Node:', process.version))
logger.system(chalk.blue.bold('Mem√≥ria inicial:', `${Math.round(process.memoryUsage().heapUsed / 1024 / 1024)}MB\n\n`))
})
process.on('uncaughtException', (error) => {
logger.error(chalk.red.bold(`Erro cr√≠tico: ${error.message}`))
process.exit(1)
})
process.on('unhandledRejection', (reason) => {
logger.error(chalk.red.bold(`Rejei√ß√£o n√£o tratada: ${reason}`))
})
}

startServer()